K=3
K_means <- function(A,new_clusters)
{
SSE_VALUES=rep(0,2);
print("AMTRIX FOR K MEANS")
print(A)
K=2
indexes = sample(1:nrow(A),K)
centroids=A[indexes,]
change=1
while(change==1){
change=0;
#clustering for all the instances
for(i in 1:nrow(A))
{
min_distance_at=0;
min_distance=10000;
#finding distance from all the centroids
for(j in 1:K)
{
dist=0;
#for each column
for(k in 1:4)
{
diff=centroids[j,k]-A[i,k];
diff=diff*diff;
dist=dist+diff;
}
if(diAst<min_distance)
{
min_distance=dist;
min_distance_at=j;
}
}
if(A[i,5]!=new_clusters[min_distance_at])
change=1;
A[i,5]=new_clusters[min_distance_at]
}
print("After Assignment")
print(A)
for(i in 1:K)
{
#all the records in cluster i
cluster=A[A[,5]==new_clusters[i],]
cluster
means=colMeans(cluster)
centroids[i,]=means;
}
}
for(i in 1:K)
{
new_c=new_clusters[i];
cluster=A[A[,5]==new_c,1:5]
for(j in 1:nrow(cluster))
{
dist=0;
for(k in 1:4)
{
diff=centroids[i,k]-cluster[j,k];
diff=diff*diff;
dist=dist+diff;
}
SSE_VALUES[i]=SSE_VALUES[i]+dist;
}
}
print(A)
return(SSE_VALUES);
}
A=as.data.frame(unclass(iris))
A=A[,-5]
A=cbind(A,1)
SSE=rep(1000,1)
CLUSTERS=rep(1,1)
for(i in 1:K-1)
{
max=which.maSSE)
selected_cluster=CLUSTERS[max];
SSE=SSE[-max]
CLUSTERS=CLUSTERS[-max]
print("minimum sse for cluster")
print(selected_cluster)
new_clusters=rep(1,2);
new_clusters[1]=selected_cluster*2;
new_clusters[2]=new_clusters[1]+1;
TEMP=A[A[,5]==selected_cluster,1:5];
SSE_VALUES=K_means(TEMP,new_clusters);
print("SSE of new Clusters")
print(SSE_VALUES)
CLUSTERS=append(CLUSTERS,new_clusters[1])
CLUSTERS=append(CLUSTERS,new_clusters[2])
SSE=append(SSE,SSE_VALUES[1])
SSE=append(SSE,SSE_VALUES[2])
}
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec(user = FALSE)
install.packages('caret')
install.packages("jpg")
install.packages("jpeg")
library(jpeg)
foo=readJPEG("image.jpeg")
library(jpeg)
foo=readJPEG("image.jpg")
install.packages("png")
library(png)
foo<-readPNG("image.png")
library(png)
foo<-readPNG("C:/Users/me/Desktop/mid sem/DWM/lab/home/image.png")
foo
foo[1,1]
library(png)
foo<-readPNG("C:/Users/me/Desktop/mid sem/DWM/lab/home/image.png")
bar<- foo[,,1]+foo[,,2]+foo[,,3]
# normalize
bar <- bar/max(bar)
# one of many ways to plot
plot(c(0,1),c(0,1),t='n')
rasterImage(bar, 0,0,1,1)
library(png)
foo<-readPNG("C:/Users/me/Desktop/mid sem/DWM/lab/home/image.png")
bar<- foo[,,1]+foo[,,2]+foo[,,3]
# normalize
#bar <- bar/max(bar)
# one of many ways to plot
plot(c(0,1),c(0,1),t='n')
library(png)
foo<-readPNG("C:/Users/me/Desktop/mid sem/DWM/lab/home/image.png")
bar<- foo[,,1]+foo[,,2]+foo[,,3]
# normalize
bar <- bar/max(bar)
# one of many ways to plot
plot(c(0,1),c(0,1),t='n')
rasterImage(bar, 0,0,1,1)
debugSource('C:/Users/me/Desktop/mid sem/DWM/mini project/Error.R')
setwd("C:/Users/me/Desktop/mid sem/DWM/mini project")
Test=read.csv('Test_result_weighted.csv')
#Test=read.csv('Test_result.csv')
Test=Test[,-1]
accuracy=length(which(Test[,3] == Test[,5]))/nrow(Test)
MAE=0;
count=0;
#calculating mean average error
for(i in 1:max(Test[,1]))
{
MAEi=0;
user_i=which(Test[,1]==i);
if(length(user_i)==0)
{
next;
}
evaluation_i=Test[user_i,];
MAEi=sum( abs( evaluation_i[,3] - evaluation_i[,4] ) )
MAEi=MAEi/nrow(evaluation_i)
if(!is.na(MAEi))
{
MAE=MAE+MAEi;
count=count+1;
}
}
MAE=MAE/count;
print(MAE)
setwd("C:/Users/me/Desktop/mid sem/DWM/mini project")
#Test=read.csv('Test_result_weighted.csv')
Test=read.csv('Test_result.csv')
Test=Test[,-1]
accuracy=length(which(Test[,3] == Test[,5]))/nrow(Test)
MAE=0;
count=0;
#calculating mean average error
for(i in 1:max(Test[,1]))
{
MAEi=0;
user_i=which(Test[,1]==i);
if(length(user_i)==0)
{
next;
}
evaluation_i=Test[user_i,];
MAEi=sum( abs( evaluation_i[,3] - evaluation_i[,4] ) )
MAEi=MAEi/nrow(evaluation_i)
if(!is.na(MAEi))
{
MAE=MAE+MAEi;
count=count+1;
}
}
MAE=MAE/count;
print(MAE)
setwd("C:/Users/me/Desktop/mid sem/DWM/mini project")
Train=read.csv('Train.csv')
Test=read.csv('Test.csv')
